@startuml
' ======= layout =========
skinparam backgroundColor #fcf9ea
skinparam titleBorderRoundCorner 15
skinparam titleFontSize 30
skinparam classAttributeIconSize 0
skinparam titleFontName Arial Black
skinparam titleFontColor #f8a978
skinparam roundcorner 20
skinparam stereotypeCBackgroundColor ffc5a1
skinparam class {

ArrowColor ffc5a1
BorderColor White
BackgroundColor badfdb
}


' ======= title =========
center header


<font color=Black size=15><b>Built by WeByte Â©</font>
endheader
title <b>US8 - Sequence Diagram\n
'https://plantuml.com/sequence-diagram
' Still working on that'
autonumber

actor ":Administrator" as Administrator

participant ":LaboratoryUI" as LaboratoryUI

participant ":LaboratoryController" as controller
participant "Company" as company
participant ":store: LaboratoryStore" as store
participant ":store: TestTypeStore" as testStore
participant "lab: Laboratory" as laboratory

activate Administrator

Administrator -> LaboratoryUI: starts the creation of a new clinical analysis laboratory
activate LaboratoryUI


LaboratoryUI -> controller : testTypes = getTestTypes()
activate controller
controller -> company : testTypeStore = getTestTypeStore()

activate company
deactivate company
controller -> testStore : testTypes = getTestTypes()
activate testStore
deactivate testStore

deactivate controller
Administrator <-- LaboratoryUI : Shows all tests and ask to select some of them.
deactivate LaboratoryUI
loop while !allTestsSelected
Administrator -> LaboratoryUI: selects the tests.
activate LaboratoryUI
end
Administrator <-- LaboratoryUI: Request data (name, ID, address, phone number, TIN)
deactivate LaboratoryUI
Administrator -> LaboratoryUI: Types the requested data.
activate LaboratoryUI
LaboratoryUI -> controller: createLaboratory(name, typesOfTestList, ID, address, phoneNumber, TIN)
activate controller

controller -> company : store = getLaboratoryStore()
activate company
deactivate company


controller -> testStore : typesOfTest = getTestTypeByCodes(typesOfTestList)
activate testStore
deactivate testStore

controller -> store : lab = createNewLaboratory(nameOfLaboratory, ID, address, phoneNumber, TIN,typesOfTest)
activate store
store -> laboratory** : create(nameOfLaboratory, ID, address, phoneNumber, TIN,typesOfTest)

deactivate store

controller -> store : validateLaboratory(lab)
activate store
deactivate store
LaboratoryUI --> Administrator : Shows all the data and requests a confirmation

deactivate LaboratoryUI
Administrator -> LaboratoryUI : confirms the data
deactivate controller
activate LaboratoryUI
LaboratoryUI -> controller : saveLaboratory()

activate controller
controller -> store : saveLaboratory(lab)
activate store
store -> store : validateLaboratory(lab)
store -> store : addLaboratory(lab)
LaboratoryUI --> Administrator : informs operation success

@enduml